import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.absolute()))

import io
import json
import requests
import requests
import emoji
import base64
import re
import tempfile
from datetime import datetime, timedelta

import jwt
from PIL import Image
import telebot
from telebot import types
from keycloak import KeycloakOpenID


from config import Config

cfg = Config.load()
bot = telebot.TeleBot(cfg.api_token)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ KeycloakOpenID
keycloak_openid = KeycloakOpenID(
    server_url=cfg.keycloak_server_url,
    client_id=cfg.keycloak_client_id,
    realm_name=cfg.keycloak_realm_name,
    client_secret_key=cfg.keycloak_client_secret
)


# Placeholder functions for API calls
def search_product_api(product_name):
    # Return top 3 relevant products
    response = requests.get(
		url='http://hack_statistics_server:5000/search_contracts', 
		data=json.dumps({'text': product_name, 'k': 100}),
	)
    rows = json.loads(response.content)
    response_list = []
    seen = set([])
    for row in rows:
        if not row['spgz_name'] in seen and len(response_list) < 5 and row['spgz_name']:
            response_list.append({
                'spgz_name': row['spgz_name']
                })
            seen.add(row['spgz_name'])
    return response_list

def last_contract_api(spgz_name):
    # Return top 3 relevant products
    response = requests.get(
		url='http://hack_statistics_server:5000/last_contract', 
		data=json.dumps({'spgz_name': spgz_name}),
	)
    rows = json.loads(response.content)
    return rows

def get_restrictions_api(product_name):
    response = requests.get(
		url='http://hack_statistics_server:5000/search_restrictions', 
		data=json.dumps({'text': product_name, "k": 1}),
	)
    return [d['restrictions'] for d in json.loads(response.content)]

def get_forecast_period_api(product_name, period):
    periodru2e = {
        '–º–µ—Å—è—Ü': "month",
        '–∫–≤–∞—Ä—Ç–∞–ª': "quarter",
        '–≥–æ–¥': "year"
    }
    images = {}
    response = requests.get(
		url='http://hack_statistics_server:5000/grafic_dynamics_financial_quantity', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': 'month'}),
	)
    if response.status_code == 200:
        val = json.loads(response.content)['img']
        try:
            images['grafic_dynamics_financial_quantity'] = Image.open(io.BytesIO(base64.b64decode(val.encode())))
        except:
            pass
    response = requests.get(
		url='http://hack_statistics_server:5000/grafic_dynamics_financial_price', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': 'month'}),
	)
    if response.status_code == 200:
        val = json.loads(response.content)['img']
        try:
            images['grafic_dynamics_financial_price'] = Image.open(io.BytesIO(base64.b64decode(val.encode())))
        except:
            pass
    response = requests.get(
		url='http://hack_statistics_server:5000/grafic_dynamics_financial_prognoze', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': periodru2e[period]}),
	)
    if response.text:
        val = json.loads(response.content)['img']
        try:
            images['grafic_dynamics_financial_prognoze'] = Image.open(io.BytesIO(base64.b64decode(val.encode())))
        except:
            pass
    response = requests.get(
		url='http://hack_statistics_server:5000/grafic_dynamics_contracts_prognoze', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': periodru2e[period]}),
	)
    if response.text:
        val = json.loads(response.content)['img']
        try:
            images['grafic_dynamics_contracts_prognoze'] = Image.open(io.BytesIO(base64.b64decode(val.encode())))
        except:
            pass

    response = requests.get(
		url='http://hack_statistics_server:5000/prognoze_financial_quarter', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': periodru2e[period]}),
	)
    financial = json.loads(response.content)
    financial_en2ru = {
        'start_quarter': 'üìÖ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≥–Ω–æ–∑–∞',
        'end_quarter': 'üìÖ –ö–æ–Ω–µ—Ü –ø—Ä–æ–≥–Ω–æ–∑–∞',
        'spgz_name': 'üè∑Ô∏è –°–ü–ì–ó',
        'saldo_start_debit_quantity': 'üî¢ –ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞',
        'saldo_start_debit_price': 'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞',
        'turnovers_debit_quantity': 'üè∑Ô∏è –ö–æ–ª-–≤–æ –∑–∞–∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
        'turnovers_debit_price': 'üí∞ –¶–µ–Ω–∞ –∑–∞–∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
        'turnovers_credit_quantity': 'üè∑Ô∏è –ö–æ–ª-–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
        'turnovers_credit_price': 'üí∞ –¶–µ–Ω–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
        'saldo_end_debit_quantity': 'üè∑Ô∏è –ö–æ–ª-–≤–æ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ç–æ–≤–∞—Ä–∞',
        'saldo_end_debit_price': 'üí∞ –¶–µ–Ω–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ç–æ–≤–∞—Ä–∞',
        'regularity': 'üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å',
    }
    def split_decimal_number_with_spaces(number):
        number_str = str(number)
        if '.' in number_str:
            # Split the number into integer and decimal parts
            integer_part, decimal_part = number_str.split('.')
        else:
            # If there is no decimal part
            integer_part, decimal_part = number_str, ''
        
        # Reverse the integer part to start grouping from the end
        reversed_int_part = integer_part[::-1]
        
        # Group the digits of the integer part into groups of three
        int_groups = [reversed_int_part[i:i+3] for i in range(0, len(reversed_int_part), 3)]
        
        # Join the groups with spaces and reverse the result
        formatted_int_part = ' '.join(int_groups)[::-1]
        
        # Combine the formatted integer part with the decimal part
        if decimal_part:
            return f"{formatted_int_part}.{decimal_part}"
        else:
            return formatted_int_part

    financial_str = ''
    n = 0
    for k, v in financial.items():
        if k in ['start_quarter', 'end_quarter']:
            date_time_obj = datetime.strptime(v, '%Y-%m-%d %H:%M:%S')
            financial_str += f"{financial_en2ru[k]}: {date_time_obj.strftime('%Y-%m-%d')}\n" 
        elif "–ö–æ–ª-–≤–æ" in k:
            financial_str += f"{financial_en2ru[k]}: {int(v)}\n" 
        elif isinstance(v, float):
            financial_str += f"{financial_en2ru[k]}: {split_decimal_number_with_spaces(round(v, 2))} —Ä—É–±.\n" 
        else:
            financial_str += f"{financial_en2ru[k]}: {v}\n" 
        if n == 3:
            financial_str += '\n'
        n += 1

    response = requests.get(
		url='http://hack_statistics_server:5000/prognoze_contracts', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': periodru2e[period]}),
	)
    contracts = json.loads(response.content)

    contracts_en2ru = {
        'contract_date': 'üìÖ –î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
        'contract_price': 'üí∞ –¶–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
        'next_contract_delta': 'üìÖ –î–µ–ª—å—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
        'regularity': 'üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤',
    }


    contracts_str = ''
    for d in contracts:
        contracts_str_lst = []
        for k, v in d.items():
            
            if k in ['contract_date']:
                date_time_obj = datetime.strptime(v, '%Y-%m-%d %H:%M:%S')
                contracts_str_lst += [f"{contracts_en2ru[k]}: {date_time_obj.strftime('%Y-%m-%d')}"]
            elif k in ['contract_price']:
                contracts_str_lst += [f"{contracts_en2ru[k]}: {split_decimal_number_with_spaces(round(v, 2))} —Ä—É–±."]
            else:
                contracts_str_lst += [f"{contracts_en2ru[k]}: {v}"]
            
        contracts_str += "\n".join(contracts_str_lst) + "\n"*2
    return {
         "forecast":  f"""–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º\n{financial_str}\n
–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º\n{contracts_str}\n
–î–ª—è –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://superset.cosahack.ru""",
         "images": images
	}

current_state = {}

@bot.message_handler(commands=['start'])
def process_start(message):
    current_state[message.chat.id] = {
        'current_search': '',
        'current_permission': []
    }
    bot.register_next_step_handler(message, request_login)

@bot.message_handler(
    func=lambda message: emoji.replace_emoji(message.text.lower(), replace='').strip()in ["–≤—ã–π—Ç–∏"]
    )
def request_login(message):
    markup = types.ReplyKeyboardMarkup()
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", reply_markup=markup)
    bot.register_next_step_handler(message, request_password)

def request_password(message):
    login = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, authorize, login)

def authorize(message, login):
    password = message.text.strip()
    try:
        access_token = keycloak_openid.token(login, password)
    except:
        bot.send_message(message.chat.id, "–õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–µ.")
        request_login(message)

    decoded_token = jwt.decode(access_token['access_token'], options={"verify_signature": False})

    roles = decoded_token.get("resource_access", {}).get("auth", []).get('roles', [])
    current_state[message.chat.id]['current_permission'] = roles
    if 'admin' in roles:
        bot.send_message(message.chat.id, """–°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è Keycloak - –∑–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ https://auth.cosahack.ru/""")
    send_main_menu(message)

def send_main_menu(message):
    current_state[message.chat.id]['current_search'] = ''
    permissions = current_state[message.chat.id]['current_permission'] 

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üì¶'))
    if 'forecast' in permissions:
        markup.add(types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑ üìä'))
    if 'json' in permissions:
        markup.add(types.KeyboardButton('–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí'))
    
    markup.add(types.KeyboardButton('–í—ã–π—Ç–∏'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=markup)

# Handlers for each option
@bot.message_handler(func=lambda message: emoji.replace_emoji(message.text.lower(), replace='').strip() in \
    ["–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", "–ø–æ–∏—Å–∫", "—Ç–æ–≤–∞—Ä", "–Ω–∞–π—Ç–∏", "–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä"])
def search_product(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
    bot.send_message(message.chat.id, """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üì¶:""", reply_markup=markup)
    bot.register_next_step_handler(message, process_search_product)

def process_search_product(message, results=None):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:  
        product_name = text
        if not results:
            results = search_product_api(product_name)
        
        if results:
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
            bot.send_message(message.chat.id, "\n".join([f"üìå{i+1}. {r['spgz_name']}" for i, r in enumerate(results)]))
            for i in range(len(results)):
                markup.add(types.KeyboardButton(f"üìå {str(i+1)}"))

            markup.add(types.KeyboardButton('–ù–∏ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤'))
            markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
            bot.send_message(message.chat.id, """–ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:
–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π""", reply_markup=markup)
            bot.register_next_step_handler(message, handle_search_selection, results)
        else:
            bot.send_message(message.chat.id, "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.")
            send_main_menu(message)

def handle_search_selection(message, results):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text == '–Ω–∏ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤':
        message = bot.send_message(message.chat.id, """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üì¶.\n
–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –æ—á–µ–Ω—å —Ç–æ—á–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç–æ–º –≤—Ä—É—á–Ω—É—é –µ–≥–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å""")
        bot.register_next_step_handler(message, process_search_product)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ'] :
        send_main_menu(message)
    elif str.isdigit(text) and 1 <= int(text) <= len(results):
        selected_product = results[int(text)-1]['spgz_name']
        current_state[message.chat.id]['current_search'] = selected_product
        permissions = current_state[message.chat.id]['current_permission'] 
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        if 'forecast' in permissions:
            markup.add(types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑ üìä'))
        if 'json' in permissions:
            markup.add(types.KeyboardButton('–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí'))
        markup.add(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è üìä'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_product}. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_post_search_actions)
    else:
        process_search_product(message, results)

def handle_post_search_actions(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text == '–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑':
        view_stock_and_forecast(message)
    elif text == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è':
        view_restrictions(message)
    elif text == '–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ json':
        send_final_json(message)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        message = bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚ùì. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üîΩ.")
        send_main_menu(message)

def view_restrictions(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
    restrictions = get_restrictions_api(current_state[message.chat.id]['current_search'])
    if not restrictions:
        restictions_str = '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ–±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã'
    else:
        restictions_str = restrictions[0]
    # for d in restictions:
    #     restictions_str += "\n".join(f"{k}: {v}" for k, v in d.items())
    #     restictions_str += "\n"*2
    bot.send_message(message.chat.id, restictions_str, reply_markup=markup)
    send_main_menu(message)
    

@bot.message_handler(func=lambda message: emoji.replace_emoji(message.text.lower(), replace='').strip() \
    in ["–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑", "–æ—Å—Ç–∞—Ç–∫–∏", "–ø—Ä–æ–≥–Ω–æ–∑"])
def view_stock_and_forecast(message):
    product_name = current_state[message.chat.id]['current_search']
    if product_name:
        process_view_stock_and_forecast(message, product_name)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üì¶'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üîΩ:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_stock_or_forecast_selection)

def handle_stock_or_forecast_selection(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()

    if text in ['–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', '–ø–æ–∏—Å–∫', '—Ç–æ–≤–∞—Ä', '–Ω–∞–π—Ç–∏', '–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä']:
        search_product(message)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        message = bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚ùì. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üîΩ.")
        send_main_menu(message)

def process_view_stock_and_forecast(message, product_name=None):
    if not product_name:
        product_name = message.text
    current_state[message.chat.id]['current_search'] = product_name
    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {product_name}")
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–ú–µ—Å—è—Ü üìÖ'), types.KeyboardButton('–ö–≤–∞—Ä—Ç–∞–ª üìÖüìÖ'), types.KeyboardButton('–ì–æ–¥ üìÖüìÖüìÖ'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
    bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ üìÖ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_forecast_period, product_name)


def handle_forecast_period(message, product_name):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    elif text in ['–º–µ—Å—è—Ü', '–∫–≤–∞—Ä—Ç–∞–ª', '–≥–æ–¥']:
        period = text
        data = get_forecast_period_api(product_name, period)
        forecast_data = data['forecast']
        images = data['images']
        permissions = current_state[message.chat.id]['current_permission'] 
        bot.send_message(message.chat.id, f"–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")
        if 'grafic_dynamics_financial_quantity' in images:
            bot.send_photo(message.chat.id, images['grafic_dynamics_financial_quantity'])
        if 'grafic_dynamics_financial_price' in images:
            bot.send_photo(message.chat.id, images['grafic_dynamics_financial_price'])

        declension = {
            "–º–µ—Å—è—Ü": "–º–µ—Å—è—Ü–∞",
            "–∫–≤–∞—Ä—Ç–∞–ª": "–∫–≤–∞—Ä—Ç–∞–ª–∞",
            "–≥–æ–¥": "–≥–æ–¥–∞"
        }
        bot.send_message(message.chat.id, f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞—á–∞–ª–æ {declension[period]}:\n{forecast_data}")
        if 'grafic_dynamics_financial_prognoze' in images:
            bot.send_photo(message.chat.id, images['grafic_dynamics_financial_prognoze'])
        if 'grafic_dynamics_contracts_prognoze' in images:
            bot.send_photo(message.chat.id, images['grafic_dynamics_contracts_prognoze'])
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)

        if 'json' in permissions:
            markup.add(types.KeyboardButton('–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí'))
        markup.add(types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª üìÖ'))
        markup.add(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è üìä'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–∫—É–ø–∫—É üõçÔ∏è. ", reply_markup=markup)
        bot.register_next_step_handler(message, handle_post_forecast_actions, product_name)


    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: '–ú–µ—Å—è—Ü', '–ö–≤–∞—Ä—Ç–∞–ª' –∏–ª–∏ '–ì–æ–¥'.")
        bot.register_next_step_handler(message, handle_forecast_period, product_name)

def handle_post_forecast_actions(message, product_name):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    elif text in ['–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ json']:
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        message = bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–∫—É–ø–∫–∏ –Ω–∞—á–∞—Ç–∞ üõçÔ∏è.", reply_markup=markup)
        send_final_json(message)
    elif text in ['–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è']:
        view_restrictions(message)
    elif text in ['–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª']:
        process_view_stock_and_forecast(message, product_name)
    else:
        message = bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚ùì. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üîΩ.")


def send_final_json(message):
    try:
        spgz_name = current_state[message.chat.id]['current_search']
        last_contract_data = last_contract_api(spgz_name)
        rows = []
        for data in last_contract_data:
            response = requests.get(
            url='http://hack_statistics_server:5000/prognoze_contracts', 
            data=json.dumps({'spgz_name': spgz_name, 'date_grain': 'month'}),
            )
            contracts = json.loads(response.content)[0]
            for k, v in contracts.items():
                if k in ['contract_date']:
                    date_time_obj = datetime.strptime(v, '%Y-%m-%d %H:%M:%S')
                    contracts[k] = date_time_obj.strftime('%Y-%m-%d')
                elif k in ['contract_price']:
                    contracts[k] = f'{round(v, 2)} —Ä—É–±.'
                else:
                    contracts[k] = v
            timedelta_obj =  timedelta(days=contracts['next_contract_delta'])
            contracts['end_date'] = (date_time_obj + timedelta_obj).strftime('%Y-%m-%d')
            contracts['year'] = (date_time_obj).strftime('%Y')

            response = requests.get(
                url='http://hack_statistics_server:5000/search_restrictions', 
                data=json.dumps({'text': spgz_name, "k": 1}),
            )
            restrictions = json.loads(response.content)
            if restrictions:
                entity_id = restrictions[0]['entity_id']
            else:
                entity_id = ''

            rows.append({
                    "DeliverySchedule": {
                        "dates": {
                            "end_date": contracts['end_date'],
                            "start_date": contracts['contract_date']
                        },
                        "deliveryAmount": "",
                        "deliveryConditions":  "",
                        "year": contracts['year']  
                    },
                    "address": {
                        "gar_id": '1',
                        "text": '1'
                    },
                    "entityId": entity_id,
                    "id": "",
                    "nmc": data['contract_price'],
                    "okei_code": "",
                    "purchaseAmount": "",
                    "spgzCharacteristics": [
                    {
                        "characteristicName": data['spgz_name'],
                        "characteristicSpgzEnums": [
                            {  
                                "spgz_code": data['spgz_code'],
                                "kpgz_name": data['kpgz_name'],
                                "kpgz_code": data['kpgz_code']
                            }
                        ],
                        "conditionTypeId": "" ,
                        "kpgzCharacteristicId":""  ,
                        "okei_id": "" ,
                        "selectType": data['supplier_selection_method'] ,
                        "typeId": ""
                    },
                ]
            })

        final_json = {
            "id": '1',
            "lotEntityId": '1',
            "CustomerId": '1',
            "rows": rows
        }
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            temp_file.write(json.dumps(final_json, ensure_ascii=False, indent=4).encode('utf-8'))
            temp_file.close()
            bot.send_document(message.chat.id, open(temp_file.name, 'rb'), caption="–§–∏–Ω–∞–ª—å–Ω—ã–π JSON:")
        send_main_menu(message)

    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# Handlers for purchase initiation and JSON creation
@bot.message_handler(func=lambda message: emoji.replace_emoji(message.text.lower(), replace='').strip() in \
    ["–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ json", "–∑–∞–∫—É–ø–∫–∞"])
def initiate_purchase_and_create_json(message, product_name=None):
    if not product_name and message.chat.id in current_state:
        product_name = current_state[message.chat.id]['current_search']
    if product_name:
        # Simulate purchase process
        message = bot.send_message(message.chat.id, "–§–æ—Ä–º–∏—Ä—É–µ–º Json? –î–∞ - –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        bot.register_next_step_handler(message, send_final_json)
        
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üì¶'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üîΩ:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_purchase_selection)

def handle_purchase_selection(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()

    if text in ['–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', '–ø–æ–∏—Å–∫', '—Ç–æ–≤–∞—Ä', '–Ω–∞–π—Ç–∏', '–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä']:
        search_product(message)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚ùì. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üîΩ.")
        send_main_menu(message)


if __name__ == '__main__':
    
	bot.infinity_polling()
