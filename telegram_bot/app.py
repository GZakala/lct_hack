import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.absolute()))


import json
import requests
# from functools import wraps

import telebot
from telebot import types
from io import BytesIO
import requests
import emoji

# from flask import Flask, request
# from keycloak import KeycloakOpenID

from config import Config

cfg = Config.load()
# app = Flask(__name__)
bot = telebot.TeleBot(cfg.api_token)
# keycloak_openid = KeycloakOpenID(
# 	server_url=cfg.keycloak_server_url,
#     client_id=cfg.keycloak_client_id,
#     realm_name=cfg.keycloak_realm_name,
#     client_secret_key=cfg.keycloak_client_secret,
# )

# @app.route('/callback')
# def callback():
# 	global access_token
# 	authorization_code = request.args.get('code')
# 	if not authorization_code:
# 		return "Authorization code not provided", 400

# 	token_response = keycloak_openid.token(authorization_code, cfg.keycloak_redirect_url)
# 	access_token = token_response['access_token']
# 	refresh_token = token_response['refresh_token']
	
# 	return f"Access Token: {access_token}<br>Refresh Token: {refresh_token}"

# def requires_auth(func):
#     @wraps(func)
#     def wrapper(message, *args, **kwargs):
#         global access_token
#         if not access_token:
#             bot.reply_to(message, "–í—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!/start")
#             return
#         return func(message, *args, **kwargs)
#     return wrapper

# @bot.message_handler(commands=['start'])
# def start(message):
#     auth_url = keycloak_openid.auth_url(redirect_uri=cfg.keycloak_redirect_uri)
#     bot.reply_to(message, f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_url}")


# Placeholder functions for API calls
def search_product_api(product_name):
    # Return top 3 relevant products
    response = requests.get(
		url='http://hack_statistics_server:5000/search_contracts', 
		data=json.dumps({'text': product_name, 'k': 5}),
	)
    rows = json.loads(response.content)
    response_list = []
    for row in rows:
         response_list.append(row.get('category', ''))
    return response_list

def create_image_with_text():
    with open("./src/h.png", 'rb') as image_file:
        img_byte_arr = BytesIO(image_file.read())
        img_byte_arr.seek(0)
        return img_byte_arr

def get_stock_and_forecast_api(product_name):
    # Return stock and forecast data as a dictionary
    return {
        "stock": "Stock data for product",
        "forecast": "Forecast data for product",
        "image": create_image_with_text()
    }

def get_forecast_period_api(product_name, period):
    # Return forecast data for a given period
    return {
         "forecast":  f"Forecast data for {period}",
         "image": create_image_with_text()
	}

def get_contract_data_api(product_name):
    # Return contract data for the product
    return {
        "last_purchase": "Date of last purchase",
        "amount": "Amount of last purchase",
        "image": create_image_with_text()
    }

data_header = {
    "id": None,
    "lotEntityId": None,
    "CustomerId": None
}

current_search = {}

# Main menu handler
@bot.message_handler(commands=['start'])
def send_welcome(message):
    current_search.pop(message.chat.id, None)  # Clear the search history for the user
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    itembtn1 = types.KeyboardButton('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üì¶')
    itembtn2 = types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑ üìä')
    itembtn3 = types.KeyboardButton('–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí')
    markup.add(itembtn1, itembtn2, itembtn3)
    bot.send_message(message.chat.id, """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ:\n
- –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üì¶\n
- –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑ üìä\n
- –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí""", reply_markup=markup)


# Handlers for each option
@bot.message_handler(func=lambda message: emoji.replace_emoji(message.text.lower(), replace='').strip() in \
    ["–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", "–ø–æ–∏—Å–∫", "—Ç–æ–≤–∞—Ä", "–Ω–∞–π—Ç–∏", "–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä"])
def search_product(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üì¶:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_search_product)

def process_search_product(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_welcome(message)
    else:  
        product_name = text
        
        results = search_product_api(product_name)
        
        if results:
            current_search[message.chat.id] = results
            
            
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            for result in results:
                markup.add(types.KeyboardButton(result))
                bot.send_message(message.chat.id, result)
            
                  
            markup.add(types.KeyboardButton('–ù–∏ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤'))
            markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
            bot.send_message(message.chat.id, "–ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=markup)
            bot.register_next_step_handler(message, handle_search_selection)
        else:
            bot.send_message(message.chat.id, "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.")
            send_welcome(message)

def handle_search_selection(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text == '–Ω–∏ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤':
        msg = bot.send_message(message.chat.id, """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üì¶.\n
                               –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –æ—á–µ–Ω—å —Ç–æ—á–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç–æ–º –≤—Ä—É—á–Ω—É—é –µ–≥–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å""")
        bot.register_next_step_handler(msg, process_search_product)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ'] :
        send_welcome(message)
    else:
        selected_product = message.text
        current_search[message.chat.id] = selected_product
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑ üìä'))
        markup.add(types.KeyboardButton('–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí'))
        markup.add(types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä ‚úèÔ∏è'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_product}. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_post_search_actions)

def handle_post_search_actions(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text == '–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑':
        view_stock_and_forecast(message)
    elif text == '–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ json':
        initiate_purchase_and_create_json(message)
    elif text == '–∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä':
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ‚úèÔ∏è:")
        bot.register_next_step_handler(msg, edit_selected_product)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_welcome(message)
    else:
        send_welcome(message)

def edit_selected_product(message):
    new_product_name = message.text
    current_search[message.chat.id] = new_product_name
    bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_product_name}.")
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑ üìä'))
    markup.add(types.KeyboardButton('–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üîΩ:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_post_search_actions)

        

@bot.message_handler(func=lambda message: emoji.replace_emoji(message.text.lower(), replace='').strip() \
    in ["–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑", "–æ—Å—Ç–∞—Ç–∫–∏", "–ø—Ä–æ–≥–Ω–æ–∑"])
def view_stock_and_forecast(message):
    if message.chat.id in current_search:
        product_name = current_search[message.chat.id]
        process_view_stock_and_forecast(message, product_name)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(types.KeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ‚úèÔ∏è'))
        markup.add(types.KeyboardButton('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üì¶'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üîΩ:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_stock_or_forecast_selection)

def handle_stock_or_forecast_selection(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text == '–≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üì¶:", reply_markup=markup)
        
        bot.register_next_step_handler(msg, process_view_stock_and_forecast)
    elif text in ['–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', '–ø–æ–∏—Å–∫', '—Ç–æ–≤–∞—Ä', '–Ω–∞–π—Ç–∏', '–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä']:
        search_product(message)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_welcome(message)
    else:
        handle_unrecognized(message)

def process_view_stock_and_forecast(message, product_name=None):
    if not product_name:
        product_name = message.text
    current_search[message.chat.id] = product_name
    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {product_name}")
    data = get_stock_and_forecast_api(product_name)
    if data:
        bot.send_photo(message.chat.id, data['image'])
        bot.send_message(message.chat.id, f"–û—Å—Ç–∞—Ç–∫–∏: {data['stock']}\n–ü—Ä–æ–≥–Ω–æ–∑: {data['forecast']}")
        markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ú–µ—Å—è—Ü üìÖ'), types.KeyboardButton('–ö–≤–∞—Ä—Ç–∞–ª üìÖüìÖ'), types.KeyboardButton('–ì–æ–¥ üìÖüìÖüìÖ'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ üìÖ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_forecast_period, product_name)
    else:
        contract_data = get_contract_data_api(product_name)
        if contract_data:
            bot.send_photo(message.chat.id, contract_data['image'])
            bot.send_message(message.chat.id, f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—É–ø–∫–∞: {contract_data['last_purchase']}\n–°—É–º–º–∞: {contract_data['amount']}")
            markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
            markup.add(types.KeyboardButton('–ú–µ—Å—è—Ü üìÖ'), types.KeyboardButton('–ö–≤–∞—Ä—Ç–∞–ª üìÖüìÖ'), types.KeyboardButton('–ì–æ–¥ üìÖüìÖüìÖ'))
            markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
            bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ üìÖ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ ?", reply_markup=markup)
            bot.register_next_step_handler(message, handle_forecast_period, product_name)
        else:
            bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üîçüö´. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            send_welcome(message)

def handle_forecast_period(message, product_name):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_welcome(message)
    elif text in ['–º–µ—Å—è—Ü', '–∫–≤–∞—Ä—Ç–∞–ª', '–≥–æ–¥']:
        period = text
        data = get_forecast_period_api(product_name, period)
        forecast_data = data['forecast']
        image = data['image']
        bot.send_photo(message.chat.id, image)
        bot.send_message(message.chat.id, f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {period}: {forecast_data}")
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–∫—É–ø–∫—É üõçÔ∏è?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_post_forecast_actions, product_name)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: '–ú–µ—Å—è—Ü', '–ö–≤–∞—Ä—Ç–∞–ª' –∏–ª–∏ '–ì–æ–¥'.")
        bot.register_next_step_handler(message, handle_forecast_period, product_name)

def handle_post_forecast_actions(message, product_name):
    if emoji.replace_emoji(message.text.lower(), replace='').strip() in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_welcome(message)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–∫—É–ø–∫–∏ –Ω–∞—á–∞—Ç–∞ üõçÔ∏è.")
        initiate_purchase_and_create_json(message, product_name)


# Handlers for purchase initiation and JSON creation
@bot.message_handler(func=lambda message: emoji.replace_emoji(message.text.lower(), replace='').strip() in \
    ["–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ json", "–∑–∞–∫—É–ø–∫–∞"])
def initiate_purchase_and_create_json(message, product_name=None):
    if not product_name and message.chat.id in current_search:
        product_name = current_search[message.chat.id]
    if product_name:
        # Simulate purchase process
        bot.send_message(message.chat.id, f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–∫—É–ø–∫–∏ –¥–ª—è {product_name} –Ω–∞—á–∞—Ç–∞ üõí.")
        
        
        
        # Send JSON file
        json_file = BytesIO(json.dumps(json_data, ensure_ascii=False, indent=4).encode('utf-8'))
        json_file.name = f"{product_name}_contract.json"
        bot.send_document(message.chat.id, json_file)

        send_welcome(message)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(types.KeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üì¶'))
        markup.add(types.KeyboardButton('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üì¶'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üîΩ:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_purchase_selection)

def handle_purchase_selection(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text == '–≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üì¶:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_initiate_purchase)
    elif text in ['–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', '–ø–æ–∏—Å–∫', '—Ç–æ–≤–∞—Ä', '–Ω–∞–π—Ç–∏', '–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä']:
        search_product(message)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_welcome(message)
    else:
        handle_unrecognized(message)

def process_initiate_purchase(message):
    product_name = message.text
    current_search[message.chat.id] = product_name
    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {product_name}")
    initiate_purchase_and_create_json(message, product_name)

# Handler for unrecognized commands
@bot.message_handler(func=lambda message: True)
def handle_unrecognized(message):
    bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚ùì. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üîΩ.")

if __name__ == '__main__':
	# from threading import Thread
	# Thread(target=app.run, kwargs={'host':'0.0.0.0', 'port': 8000}).start()
	bot.infinity_polling()
