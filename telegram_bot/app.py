import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.absolute()))


import json
import requests
# from functools import wraps
from PIL import Image
import tempfile
import telebot
from telebot import types
from io import BytesIO
import requests
import emoji
import base64
import hashlib
from datetime import datetime

import io


from config import Config

cfg = Config.load()
bot = telebot.TeleBot(cfg.api_token)


periodru2e = {
    '–º–µ—Å—è—Ü': "month",
    '–∫–≤–∞—Ä—Ç–∞–ª': "quarter",
    '–≥–æ–¥': "year"
}

md5_hash = hashlib.md5()

# Placeholder functions for API calls
def search_product_api(product_name):
    # Return top 3 relevant products
    response = requests.get(
		url='http://hack_statistics_server:5000/search_contracts', 
		data=json.dumps({'text': product_name, 'k': 100}),
	)
    rows = json.loads(response.content)
    response_list = []
    seen = set([])
    for row in rows:
        if not row['spgz_name'] in seen and len(response_list) < 5 and row['spgz_name']:
            response_list.append({
                'spgz_name': row['spgz_name']
                })
            seen.add(row['spgz_name'])
    return response_list

def get_restrictions_api(product_name):
    response = requests.get(
		url='http://hack_statistics_server:5000/search_restrictions', 
		data=json.dumps({'text': product_name, "k": 1}),
	)
    return [d['restrictions'] for d in json.loads(response.content)]

def get_forecast_period_api(product_name, period):
    images = {}
    response = requests.get(
		url='http://hack_statistics_server:5000/grafic_dynamics_financial_quantity', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': 'month'}),
	)
    if response.status_code == 200:
        val = json.loads(response.content)['img']
        try:
            images['grafic_dynamics_financial_quantity'] = Image.open(io.BytesIO(base64.b64decode(val.encode())))
        except:
            pass
    response = requests.get(
		url='http://hack_statistics_server:5000/grafic_dynamics_financial_price', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': 'month'}),
	)
    if response.status_code == 200:
        val = json.loads(response.content)['img']
        try:
            images['grafic_dynamics_financial_price'] = Image.open(io.BytesIO(base64.b64decode(val.encode())))
        except:
            pass
    response = requests.get(
		url='http://hack_statistics_server:5000/grafic_dynamics_financial_prognoze', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': periodru2e[period]}),
	)
    if response.text:
        val = json.loads(response.content)['img']
        try:
            images['grafic_dynamics_financial_prognoze'] = Image.open(io.BytesIO(base64.b64decode(val.encode())))
        except:
            pass
    response = requests.get(
		url='http://hack_statistics_server:5000/grafic_dynamics_contracts_prognoze', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': periodru2e[period]}),
	)
    if response.text:
        val = json.loads(response.content)['img']
        try:
            images['grafic_dynamics_contracts_prognoze'] = Image.open(io.BytesIO(base64.b64decode(val.encode())))
        except:
            pass

    response = requests.get(
		url='http://hack_statistics_server:5000/prognoze_financial_quarter', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': periodru2e[period]}),
	)
    financial = json.loads(response.content)
    financial_str = "\n".join(f"{financial_en2ru[k]}: {v}" for k, v in financial.items())
    response = requests.get(
		url='http://hack_statistics_server:5000/prognoze_contracts', 
		data=json.dumps({'spgz_name': product_name, 'date_grain': periodru2e[period]}),
	)
    contracts = json.loads(response.content)
    contracts_str = ''
    for d in contracts:
        contracts_str_lst = []
        for k, v in d.items():
            
            if k in ['contract_date']:
                date_time_obj = datetime.strptime(v, '%Y-%m-%d %H:%M:%S')
                contracts_str_lst += [f"{contracts_en2ru[k]}: {date_time_obj.strftime('%Y-%m-%d')}"]
            else:
                contracts_str_lst += [f"{contracts_en2ru[k]}: {v}"]
            
        contracts_str += "\n".join(contracts_str_lst) + "\n"*2
    return {
         "forecast":  f"""–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º\n{financial_str}\n
–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º\n{contracts_str}\n
–î–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: http://5.35.7.187:8088/superset/dashboard/4/?native_filters_key=S0QB-jpejvRie2R4JIK9qpwTyNwhWEESdZ9oWMo4T7BVDB6FFRIEKNygtHn6tJIP""",
         "images": images
	}


# –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON
data = {
    "id": None,
    "lotEntityId": None,
    "CustomerId": None,
    "rows": [
        {
            "DeliverySchedule": {
                "dates": {
                    "end_date": "",
                    "start_date": ""
                },
                "deliveryAmount": None,
                "deliveryConditions": "",
                "year": None
            },
            "address": {
                "gar_id": "",
                "text": ""
            },
            "entityId": None,
            "id": None,
            "nmc": None,
            "okei_code": "",
            "purchaseAmount": None,
            "spgzCharacteristics": [
                {
                    "characteristicName": " ",
                    "characteristicSpgzEnums": [
                        {  "value": " "
                        }
                    ],
                    "conditionTypeId": "" ,
                    "kpgzCharacteristicId":""  ,
                    "okei_id": "" ,
                    "selectType": "" ,
                    "typeId": "" ,
                    "value1": "" ,
                    "value2": "" 
                },
            ]
           
        }
    ]
}


financial_en2ru = {
  'start_quarter': '–ù–∞—á–∞–ª–æ –ø—Ä–æ–≥–Ω–æ–∑–∞',
  'end_quarter': '–ö–æ–Ω–µ—Ü –ø—Ä–æ–≥–Ω–æ–∑–∞',
  'spgz_name': '–°–ü–ì–ó',
  'saldo_start_debit_quantity': '–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞',
  'saldo_start_debit_price': '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞',
  'turnovers_debit_quantity': '–ö–æ–ª-–≤–æ –∑–∞–∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
  'turnovers_debit_price': '–¶–µ–Ω–∞ –∑–∞–∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
  'turnovers_credit_quantity': '–ö–æ–ª-–≤–æ –ø–æ—Ç—Ä–æ—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
  'turnovers_credit_price': '–¶–µ–Ω–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
  'saldo_end_debit_quantity': '–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ç–æ–≤–∞—Ä–∞',
  'saldo_end_debit_price': '–¶–µ–Ω–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ç–æ–≤–∞—Ä–∞',
  'regularity': '–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å',
}
contracts_en2ru = {
  'contract_date': '–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
  'contract_price': '–¶–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
  'next_contract_delta': '–î–µ–ª—å—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
  'regularity': '–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤',
}

current_search = {}
user_sessions = {}
current_data = {}


# Main menu handler
@bot.message_handler(commands=['start'])
def send_welcome(message):
    current_search.pop(message.chat.id, None)  # Clear the search history for the user
    user_sessions.pop(message.chat.id, None)  # Clear the session for the user
    current_data.pop(message.chat.id, None)
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    itembtn1 = types.KeyboardButton('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üîê')
    markup.add(itembtn1)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.", reply_markup=markup)
    bot.register_next_step_handler(message, request_login)

def request_login(message):
    message = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    bot.register_next_step_handler(message, request_password)

def request_password(message):
    login = message.text.strip()
    response = requests.get(
		url='http://hack_statistics_server:5000/user', 
		data=json.dumps({'username': login}),
	)

    if json.loads(response.content) != {"result": "User not found"}:
        user_sessions[message.chat.id] = {'login': login}
        current_data[message.chat.id] = {}
        message = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        bot.register_next_step_handler(message, process_login)
    else:
        bot.send_message(message.chat.id, "–õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        send_welcome(message)

def process_login(message):
    password = message.text.strip()
    login = user_sessions[message.chat.id]['login']

    response = requests.get(
		url='http://hack_statistics_server:5000/user', 
		data=json.dumps({'username': login}),
	)
    user_data = json.loads(response.content)
    my_password_bytes = password.encode('utf-8')
    md5_hash = hashlib.md5()
    md5_hash.update(my_password_bytes)

    if user_data['password'] == md5_hash.hexdigest():
        user_sessions[message.chat.id]['permission_admin'] = int(user_data['permission_admin'])
        send_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        send_welcome(message)

def send_main_menu(message):
    current_search.pop(message.chat.id, None)
    username = user_sessions[message.chat.id]['login']
    current_data[message.chat.id] = {}
    response = requests.get(
		url='http://hack_statistics_server:5000/user', 
		data=json.dumps({'username': username}),
	)
    user_data = json.loads(response.content)
    permission_admin = int(user_data['permission_admin'])

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    itembtn1 = types.KeyboardButton('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üì¶')
    markup.add(itembtn1)
    if int(user_data['permission_forecast']):
        markup.add(types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑ üìä'))
    if int(user_data['permission_json']):
        markup.add(types.KeyboardButton('–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí'))
    
    if permission_admin:
        itembtn4 = types.KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë•')
        markup.add(itembtn4)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=markup)



# Handlers for each option
@bot.message_handler(func=lambda message: emoji.replace_emoji(message.text.lower(), replace='').strip() in \
    ["–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", "–ø–æ–∏—Å–∫", "—Ç–æ–≤–∞—Ä", "–Ω–∞–π—Ç–∏", "–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä"])
def search_product(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
    message = bot.send_message(message.chat.id, """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üì¶:
–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –æ—á–µ–Ω—å —Ç–æ—á–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç–æ–º –≤—Ä—É—á–Ω—É—é –µ–≥–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å""", reply_markup=markup)
    bot.register_next_step_handler(message, process_search_product)

def process_search_product(message, results=None):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:  
        product_name = text
        if not results:
            results = search_product_api(product_name)
        
        if results:
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            bot.send_message(message.chat.id, "\n".join([f"üìå{i+1}. {r['spgz_name']}" for i, r in enumerate(results)]))
            for i in range(len(results)):
                markup.add(types.KeyboardButton(f"üìå {str(i+1)}"))

            markup.add(types.KeyboardButton('–ù–∏ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤'))
            markup.add(types.KeyboardButton('–ó–∞–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –≤—Ä—É—á–Ω—É—é ‚úèÔ∏è'))
            markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
            bot.send_message(message.chat.id, """–ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:
–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π""", reply_markup=markup)
            bot.register_next_step_handler(message, handle_search_selection, results)
        else:
            bot.send_message(message.chat.id, "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.")
            send_main_menu(message)

def handle_search_selection(message, results):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text == '–Ω–∏ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤':
        message = bot.send_message(message.chat.id, """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üì¶.\n
–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –æ—á–µ–Ω—å —Ç–æ—á–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç–æ–º –≤—Ä—É—á–Ω—É—é –µ–≥–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å""")
        bot.register_next_step_handler(message, process_search_product)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ'] :
        send_main_menu(message)
    elif str.isdigit(text) and 1 <= int(text) <= len(results):
        selected_product = results[int(text)-1]['spgz_name']
        current_search[message.chat.id] = selected_product
        username = user_sessions[message.chat.id]['login']
        response = requests.get(
            url='http://hack_statistics_server:5000/user', 
            data=json.dumps({'username': username}),
        )
        user_data = json.loads(response.content)
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        if int(user_data['permission_forecast']):
            markup.add(types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑ üìä'))
        if int(user_data['permission_json']):
            markup.add(types.KeyboardButton('–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí'))
        markup.add(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è üìä'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_product}. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_post_search_actions)
    else:
        process_search_product(message, results)

def handle_post_search_actions(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text == '–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑':
        view_stock_and_forecast(message)
    elif text == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è':
        view_restrictions(message)
    elif text == '–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ json':
        
        initiate_purchase_and_create_json(message)

    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        send_main_menu(message)

def view_restrictions(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
    restrictions = get_restrictions_api(current_search[message.chat.id])
    if not restrictions:
        restictions_str = '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ–±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã'
    else:
        restictions_str = restrictions[0]
    # for d in restictions:
    #     restictions_str += "\n".join(f"{k}: {v}" for k, v in d.items())
    #     restictions_str += "\n"*2
    bot.send_message(message.chat.id, restictions_str, reply_markup=markup)
    send_main_menu(message)
    

def edit_selected_product(message):
    

    new_product_name = message.text
    current_search[message.chat.id] = new_product_name
    login = user_sessions[message.chat.id]['login']
    response = requests.get(
            url='http://hack_statistics_server:5000/user', 
            data=json.dumps({'username': login}),
        )
    user_data = json.loads(response.content)
    bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_product_name}.")
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    if int(user_data['permission_forecast']):
            markup.add(types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑ üìä'))
    if int(user_data['permission_json']):
        markup.add(types.KeyboardButton('–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üîΩ:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_post_search_actions)

        

@bot.message_handler(func=lambda message: emoji.replace_emoji(message.text.lower(), replace='').strip() \
    in ["–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑", "–æ—Å—Ç–∞—Ç–∫–∏", "–ø—Ä–æ–≥–Ω–æ–∑"])
def view_stock_and_forecast(message):
    if message.chat.id in current_search:
        product_name = current_search[message.chat.id]
        process_view_stock_and_forecast(message, product_name)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üì¶'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üîΩ:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_stock_or_forecast_selection)

def handle_stock_or_forecast_selection(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()

    if text in ['–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', '–ø–æ–∏—Å–∫', '—Ç–æ–≤–∞—Ä', '–Ω–∞–π—Ç–∏', '–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä']:
        search_product(message)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        handle_unrecognized(message)

def process_view_stock_and_forecast(message, product_name=None):
    if not product_name:
        product_name = message.text
    current_search[message.chat.id] = product_name
    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {product_name}")
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add(types.KeyboardButton('–ú–µ—Å—è—Ü üìÖ'), types.KeyboardButton('–ö–≤–∞—Ä—Ç–∞–ª üìÖüìÖ'), types.KeyboardButton('–ì–æ–¥ üìÖüìÖüìÖ'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
    bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ üìÖ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_forecast_period, product_name)


def handle_forecast_period(message, product_name):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    elif text in ['–º–µ—Å—è—Ü', '–∫–≤–∞—Ä—Ç–∞–ª', '–≥–æ–¥']:
        period = text
        data = get_forecast_period_api(product_name, period)
        forecast_data = data['forecast']
        images = data['images']
        login = user_sessions[message.chat.id]['login']
        bot.send_message(message.chat.id, f"–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")
        if 'grafic_dynamics_financial_quantity' in images:
            bot.send_photo(message.chat.id, images['grafic_dynamics_financial_quantity'])
        if 'grafic_dynamics_financial_price' in images:
            bot.send_photo(message.chat.id, images['grafic_dynamics_financial_price'])
        bot.send_message(message.chat.id, f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞—á–∞–ª–æ {period}: {forecast_data}")
        if 'grafic_dynamics_financial_prognoze' in images:
            bot.send_photo(message.chat.id, images['grafic_dynamics_financial_prognoze'])
        if 'grafic_dynamics_contracts_prognoze' in images:
            bot.send_photo(message.chat.id, images['grafic_dynamics_contracts_prognoze'])
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

        response = requests.get(
            url='http://hack_statistics_server:5000/user', 
            data=json.dumps({'username': login}),
        )
        user_data = json.loads(response.content)

        if int(user_data['permission_json']):
            markup.add(types.KeyboardButton('–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON üõí'))
        markup.add(types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª üìÖ'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–∫—É–ø–∫—É üõçÔ∏è. ", reply_markup=markup)
        bot.register_next_step_handler(message, handle_post_forecast_actions, product_name)


    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: '–ú–µ—Å—è—Ü', '–ö–≤–∞—Ä—Ç–∞–ª' –∏–ª–∏ '–ì–æ–¥'.")
        bot.register_next_step_handler(message, handle_forecast_period, product_name)

def handle_post_forecast_actions(message, product_name):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    elif text in ['–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ json']:
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        message = bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–∫—É–ø–∫–∏ –Ω–∞—á–∞—Ç–∞ üõçÔ∏è.", reply_markup=markup)
        
        initiate_purchase_and_create_json(message, product_name)
    elif text in ['–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª']:
        process_view_stock_and_forecast(message, product_name)
    else:
        handle_unrecognized(message)


def send_final_json(message):
    try:
        search = current_search[message.chat.id]
        final_json = {
            "id": '1',
            "lotEntityId": '1',
            "CustomerId": '1',
            "rows": [
                {
                    "DeliverySchedule": {
                        "dates": {
                            "end_date":  "",
                            "start_date":  ""
                        },
                        "deliveryAmount": "",
                        "deliveryConditions":  "",
                        "year":  ""
                    },
                    "address": {
                        "gar_id": '1',
                        "text": '1'
                    },
                    "entityId": "",
                    "id":  "",
                    "nmc": '12345',
                    "okei_code":  "",
                    "purchaseAmount":  "",
                    "spgzCharacteristics": [
                    {
                        "characteristicName": search,
                        "characteristicSpgzEnums": [
                            {  "value": " "
                            }
                        ],
                        "conditionTypeId": "" ,
                        "kpgzCharacteristicId":""  ,
                        "okei_id": "" ,
                        "selectType": "" ,
                        "typeId": "" ,
                        "value1": "" ,
                        "value2": "" 
                    },
                ]
                }
            ]
        }
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            temp_file.write(json.dumps(final_json, ensure_ascii=False, indent=4).encode('utf-8'))
            temp_file.close()
            bot.send_document(message.chat.id, open(temp_file.name, 'rb'), caption="–§–∏–Ω–∞–ª—å–Ω—ã–π JSON:")
        send_main_menu(message)

    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# Handlers for purchase initiation and JSON creation
@bot.message_handler(func=lambda message: emoji.replace_emoji(message.text.lower(), replace='').strip() in \
    ["–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ json", "–∑–∞–∫—É–ø–∫–∞"])
def initiate_purchase_and_create_json(message, product_name=None):
    if not product_name and message.chat.id in current_search:
        product_name = current_search[message.chat.id]
    if product_name:
        # Simulate purchase process
        message = bot.send_message(message.chat.id, "–§–æ—Ä–º–∏—Ä—É–µ–º Json? –î–∞ - –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        bot.register_next_step_handler(message, send_final_json)
        
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üì¶'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üîΩ:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_purchase_selection)

def handle_purchase_selection(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()

    if text in ['–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', '–ø–æ–∏—Å–∫', '—Ç–æ–≤–∞—Ä', '–Ω–∞–π—Ç–∏', '–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä']:
        search_product(message)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        handle_unrecognized(message)

@bot.message_handler(func=lambda message: emoji.replace_emoji(message.text.lower(), replace='').strip() == '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
def manage_users(message):
    login = user_sessions[message.chat.id]['login']
    response = requests.get(
            url='http://hack_statistics_server:5000/user', 
            data=json.dumps({'username': login}),
        )
    user_data = json.loads(response.content)
    permission_admin = int(user_data['permission_admin'])
    if permission_admin:
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§'))
        markup.add(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üóëÔ∏è'))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_user_management)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        send_main_menu(message)

def handle_user_management(message):
    text = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if text == '–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        message = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:" , reply_markup=markup)
        bot.register_next_step_handler(message, add_user_name)
    elif text == '—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        message = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, delete_user_name)
    elif text in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.")
        manage_users(message)


def delete_user_name(message):
    username = emoji.replace_emoji(message.text.lower(), replace='').strip()
    response = requests.get(
            url='http://hack_statistics_server:5000/user', 
            data=json.dumps({'username': username}),
        )

    if username in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    elif json.loads(response.content) == {'result': 'User not found'}:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
        manage_users(message)
    else:
        user_data = {'username': username}
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        message = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —É–¥–∞–ª—è–µ–º:", reply_markup=markup)
        bot.register_next_step_handler(message, delete_user_password, user_data)


def delete_user_password(message, user_data):
    password = emoji.replace_emoji(message.text.lower(), replace='').strip()

    if password in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else: 
        my_password_bytes = password.encode('utf-8')
        md5_hash = hashlib.md5()
        md5_hash.update(my_password_bytes)

        user_data['password'] = md5_hash.hexdigest()
        response = requests.delete(
            url='http://hack_statistics_server:5000/user', 
            data=json.dumps(user_data),
        )
        if response.content and json.loads(response.content) == {'error': f'Incorrect password'}:
            bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥–æ—à–µ–ª.")
            manage_users(message)
        else:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

            send_main_menu(message)


def add_user_name(message):
    new_username = emoji.replace_emoji(message.text.lower(), replace='').strip()
    response = requests.get(
            url='http://hack_statistics_server:5000/user', 
            data=json.dumps({'username': new_username}),
        )

    if new_username in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    elif json.loads(response.content) != {'result': 'User not found'}:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
        manage_users(message)
    else:
        user_data = {'username': new_username}
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        message = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        bot.register_next_step_handler(message, add_user_password, user_data)

def add_user_password(message, user_data):
    new_password = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if new_password in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        my_password_bytes = new_password.encode('utf-8')
        md5_hash = hashlib.md5()
        md5_hash.update(my_password_bytes)

        user_data['password'] = md5_hash.hexdigest()
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, f"–í –∫–∞–∫–æ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?", reply_markup=markup)
        bot.register_next_step_handler(message, add_user_department, user_data)

def add_user_department(message, user_data):
    department = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if department in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        user_data['department'] = department
        bot.send_message(message.chat.id, f"–î–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞? –¥–∞/–Ω–µ—Ç")
        bot.register_next_step_handler(message, add_user_permission_admin, user_data)

def add_user_permission_admin(message, user_data):
    perm = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if perm in ['–¥–∞', '–Ω–µ—Ç']:
        if perm == '–¥–∞':
            user_data['permission_admin'] = 1
        elif perm == '–Ω–µ—Ç':
            user_data['permission_admin'] = 0
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, f"–†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –∏ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –¥–∞/–Ω–µ—Ç", reply_markup=markup)
        bot.register_next_step_handler(message, add_user_permission_view_forecasts, user_data)
    elif perm in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        bot.send_message(message.chat.id, f"–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –¥–∞/–Ω–µ—Ç")
        bot.register_next_step_handler(message, add_user_permission_admin, user_data)
   

def add_user_permission_view_forecasts(message, user_data):
    perm = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if perm in ['–¥–∞', '–Ω–µ—Ç']:
        if perm == '–¥–∞':
            user_data['permission_forecast'] = 1
        elif perm == '–Ω–µ—Ç':
            user_data['permission_forecast'] = 0
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
        bot.send_message(message.chat.id, f"–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫—É–ø–∫—É –∏ json –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –¥–∞/–Ω–µ—Ç", reply_markup=markup)
        bot.register_next_step_handler(message, add_user_permission_create_json, user_data)
    elif perm in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        bot.send_message(message.chat.id, f"–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –¥–∞/–Ω–µ—Ç")
        bot.register_next_step_handler(message, add_user_permission_view_forecasts, user_data)

def add_user_permission_create_json(message, user_data):
    perm = emoji.replace_emoji(message.text.lower(), replace='').strip()
    if perm in ['–¥–∞', '–Ω–µ—Ç']:
        if perm == '–¥–∞':
            user_data['permission_json'] = 1
        elif perm == '–Ω–µ—Ç':
            user_data['permission_json'] = 0

        response = requests.put(
            url='http://hack_statistics_server:5000/user', 
            data=json.dumps(user_data),
        )
        
        if response.status_code != 200:
            bot.send_message(message.chat.id, f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω, 
–≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏. {response.contentjson.loads(response.content)}""")
        else:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

        send_main_menu(message)
    elif perm in ['–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞–ª–æ']:
        send_main_menu(message)
    else:
        bot.send_message(message.chat.id, f"–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –¥–∞/–Ω–µ—Ç")
        bot.register_next_step_handler(message, add_user_permission_create_json, user_data)


# Handler for unrecognized commands
@bot.message_handler(func=lambda message: True)
def handle_unrecognized(message):
    bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚ùì. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üîΩ.")

if __name__ == '__main__':
    
	bot.infinity_polling()
